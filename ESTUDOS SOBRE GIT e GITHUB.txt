GIT e GITHUB

1. *GIT

Para a instalação do GIT, o endereço é: git-scm.com

//---
Após o dowload, já escolhida a versão apropriada, verifica-se no GIT, o branch "ramificação" 
- que é aquela que vai estar ativa, o nome é "master", diferentemente do GITHUB, o branch é "main"
Portanto, é possível igualar, quando da instalação, ambos para "main"
//---

É possível utilizar o CMD, GIT bash, ou mesmo vincular o uso do GIT vinculado ao VisualCode 
- a vinculação deve ser realizada quando da instalação do GIT

//---

Após a instalação, para confirmar que está funcionando corretamente, no prompt de comando deve-se
digitar o seguinte comando:

git --version

Se estiver correta a instalação, aparecerá a versão instalada

Interessante ficar atento para a característica específica dos comandos em GIT, pois, em sua linguagem
os comandos nativos são precedidos de dois traços: ex. --help

//---

CONFIGURANDO CREDENCIAIS
Para configurar o usar name e e-mail, devem ser utilizados os seguintes comandos:

git config --global user.name "dev" (entre as aspas deve ser inserido o user name)
Para verificar o user name configurado, deve ser usado o comando:
git config user.name

git config --global user.email "@gmail.com" (entre as aspas deve ser inserido o user name)
Para verificar o user name configurado, deve ser usado o comando:
git config user.email

FUNDAMENTOS
//---

* Repositório (repo) --- online e offline
Local onde os arquivos e projetos ficam armazenados 
Gerenciameento de versões - features (recursos, característica)

GitHub é um serviço de hospedagem para gerenciamemento de repositórios - serviço semelhante, pode ser encontrado no bitbucket
Pode ser armazenado de forma privada ou pública

//---

COMANDOS git, para a criação (inicialização - git init)

Uma vez já instalado o GIT no computador, selecionada a respectiva pasta com os arquivos, no terminal, deve ser escrito o seguinte comando:
git init

Para selecionar a respectiva pasta, podem ser inseridos os seguintes comandos:
1º - deve ser selecionado o hd onde se encontra a pasta: por. ex. d:
2º - deve ser chamada a pasta com o seguinte comando: cd pasta
3º - eventualmente, caso haja uma subpasta, deve ser chamada com o mesmo comando: cd subpasta
4º - caso ainda não tenha sido inicializado o repositório da respectiva pasta, é possível verificar essa condição a partir do seguinte comando:
git status
A mensagem de retorno demonstrará se há ou não um repositório na pasta

Para inicializar o projeto num repositório, deve ser usado o comando:
git init
Com esse comando, a respectiva pasta começa a ser reconhecida como um repositório git
A pasta relacionada ao repositório é uma pasta oculta do tipo .git

Nessa etapa, ainda será necessário realizar a adição com o camando, para que os arquivos de determinada pasta seja monitorado pelo git 
git add (deve ser colocado o nome do arquivo com sua respectiva extensão, por ex. nomedoarquivo.txt)
caso queira adicionar todos os arquivos da pasta, basta escrever o comando: git add . (espaço e ponto, para pegar todos os arquivos e todas as extensões)
diz-se de um arquivo adicionado, que ele, agora, está "trackeado"

Em cada uma das etapas descritas acima é possível verificar a evolução do status, mediante o comando git status
control + s, salva o arquivo

Posteriormente, será necessário realizar o "commit" para o repositório; que, em português pode ser traduzido por entregar, enviar, consignar, etc.
O comando correspondente é:
git commit ESTUDOS SOBRE GIT.txt -m "feature" (digita-se git, depois commit, traço m e, entre aspas, o comentário - relativo aos recursos (feature), que foram inovados)
-m é uma flag que sinaliza que está sendo inserida uma mensagem, por ex. "Anotações sobre estudos a respeito de GIT e GITHUB"

É possível realizar o comando git commit para todos os arquivos da mesma pasta de uma só vez, da seguinte forma:
Ao invés de, após o comando git commit, ser colocado o nome do arquivo e sua extensão, deve-se, após o comando git commit, apens colocar um ponto (para que encontre todos os tipos de extensões de arquivos), dar um espaço e colocar a flag -m, com posterior descrição da feature correspondente

Nessa etapa, os arquivos já estão prontos para serem enviados para o GitHub

2. *GITHUB

É um servidor online de gerenciamento de repositórios (privado ou público) - tbm serve como uma rede de desenvolvedores

É necessário criar uma conta do GITHUB - site: github.com

No site do github deve-se criar um novo repositório e configurá-lo para privado ou público, além de nomeá-lo

Ao criar um novo repositório, aparecerá alguns comandos; como nas sugestões, todos devem ser realizados com copia e cola.

Com o comando: git pull, é possível buscar um arquivo que está online, porém, que ainda não está no repositório offline, git

Para clonar o repositório, é possível utilizar o comando: git clone + o url copiado (se colocar um ponto, após o url, o clone será enviado sem criar uma nova pasta)
Antes disso, no site do github, na aba code, deve-se copiar o endereço

Para acessar o log do projeto/arquivo, é possível utilizar o seguinte comando: git log

Para sair da tela do git log, deve ser escrita a letra q 2 vezes

Com o comando git checkout (espaço) e o nome do arquivo.(ponto)extensão, o arquivo desejado volta ao status anterior (original)

Para ignorar pastas e arquivos indesejados para o envio para o Github, pode ser utilizado o comando:
1º - deve ser criado um arquivo .gitignore
2º - deve ser adicionado ao arquivo .gitignore, os arquivos e pastas indesejados 
3º - arquivos indesejados devem der indicados com o nome do arquivo
4º - pastas indesejadas devem ser referenciadas com barra(/) e o nome da pasta

Dessa forma, o arquivo gitignore será adicionado ao projeto, entretanto, as pastas e arquivos nele indicadas NÃO serão enviados para o github

Outro comando importante é o: git reset
Esse comando deve ser usado com cautela, pois uma vez realizado, não há como voltar atrás
Basicamente, ele reseta tudo o que foi codificado antes de realizar o commit e o push
Com esse comando, o último commit e push realizado para o github volta a ser considerado como arquivos e pastas originais
A forma correta de uso desse comando é:
git reset --hard origin/main

*Branch

É uma forma que serve para separar, gerenciar, versões do projeto.
Ao iniciar um projeto, ele sempre inicia na Branch main.

Por convenção, a Branch main é considerada a matriz, master, ou, em outras palavras, é o arquivo melhor desenvolvido até aquele momento.
Dessa forma, para alterações colaterais do arquivo, sem que haja mudança no atual, até que uma nova versão esteja mais apta, convém traalhar numa Branch derivada para, posteriormente, realizar uma merge, que é a junção (mistura) das versões contidas nos Branchs diversos.



























